// BLOCOS DE CODIGO PARA A PROVA


// PARTILHAR CHAVES PUBLICAS
// CLIENTE 	-- CLIENTE -> SERVER
#region Exchange Public Keys
// Send public key...
Console.Write("Sending public key... ");
msg = protocol.Make(ProtocolSICmdType.PUBLIC_KEY, rsaClient.ToXmlString(false));
netStream.Write(msg, 0, msg.Length);
Console.WriteLine("ok");

// Receive server public key
Console.Write("waiting for server public key...");
netStream.Read(protocol.Buffer, 0, protocol.Buffer.Length);
rsaServer.FromXmlString(protocol.GetStringFromData());
Console.WriteLine("ok");
#endregion

// SERVER	-- CLIENTE -> SERVER
#region Exhange Public Keys
// Receive client public key
Console.Write("waiting for client public key...");
netStream.Read(protocol.Buffer, 0, protocol.Buffer.Length);
rsaClient.FromXmlString(protocol.GetStringFromData());
Console.WriteLine("ok");

// Send public key...
Console.Write("Sending public key... ");
msg = protocol.Make(ProtocolSICmdType.PUBLIC_KEY, rsaServer.ToXmlString(false));
netStream.Write(msg, 0, msg.Length);
Console.WriteLine("ok");
#endregion
// CLIENTE 	-- SERVER -> CLIENTE
// SERVER	-- SERVER -> CLIENTE


// ENCRIPTAR COMPONENTES DO ALGORITMO SIMETRICO


#region Exchange Secret Key
// Send key...
msg = protocol.Make(ProtocolSICmdType.SECRET_KEY, rsaServer.Encrypt(aes.Key, true));
netStream.Write(msg, 0, msg.Length);

// Receive ack
netStream.Read(protocol.Buffer, 0, protocol.Buffer.Length);


// Send iv...
Console.Write("Sending  iv... ");
msg = protocol.Make(ProtocolSICmdType.IV, rsaServer.Encrypt(aes.IV, true));
netStream.Write(msg, 0, msg.Length);
Console.WriteLine("ok");
Console.WriteLine("   Sent: " + ProtocolSI.ToHexString(aes.IV));

// Receive ack
Console.Write("waiting for ACK...");
netStream.Read(protocol.Buffer, 0, protocol.Buffer.Length);
Console.WriteLine("ok");

#endregion

// ENCRIPTAR DADOS COM ALGORITMO SIMETRICO
// CLIENT -- CLIENT -> SERVER
// SERVER -- CLIENT -> SERVER
// CLIENT -- SERVER -> CLIENT
// SERVER -- SERVER -> CLIENT

// ASSINAR DADOS COM ALGORITMO ASSIMETRICO